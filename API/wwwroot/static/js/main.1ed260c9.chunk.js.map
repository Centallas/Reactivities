{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceHolder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/Home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetaledHeader.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","console","log","status","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","toast","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","RevealContent","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Content","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingComponents","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","verticalAlign","relaxed","divided","ribbon","Extra","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","disable","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","GridColumn","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","NavBar","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"wZASaA,EAIT,WAAYC,EAASC,GAAyB,yBAH9CD,UAG6C,OAF7CC,gBAE6C,EACzCC,KAAKF,KAAOA,EACZE,KAAKD,WAAaA,GAIbE,EAIT,aAA0C,IAA9BC,EAA6B,uDAAjB,EAAGC,EAAc,uDAAH,EAAG,yBAHzCD,gBAGyC,OAFzCC,cAEyC,EACrCH,KAAKE,WAAaA,EAClBF,KAAKG,SAAWA,GCVxBC,IAAMC,SAASC,QAAUC,OAEzBH,IAAMI,aAAaC,QAAQC,KAAI,SAAAC,GAC3B,IAAMC,EAAQC,EAAMC,YAAYF,MAEhC,OADIA,IAAOD,EAAOI,QAAQC,cAAf,iBAAyCJ,IAC7CD,KAGXP,IAAMI,aAAaS,SAASP,IAA5B,+BAAAQ,EAAA,MAAgC,WAAMD,GAAN,eAAAC,EAAA,iFAEtBnB,EAAakB,EAASF,QAAT,YAFS,uBAIxBE,EAASnB,KAAO,IAAID,EAAgBoB,EAASnB,KAAMqB,KAAKC,MAAMrB,IAJtC,kBAKjBkB,GALiB,gCAOrBA,GAPqB,2CAAhC,uDAQG,SAACI,GACAC,QAAQC,IAAIF,GACZ,MAAiCA,EAAMJ,SAA/BnB,EAAR,EAAQA,KAAM0B,EAAd,EAAcA,OAAQb,EAAtB,EAAsBA,OACtB,OAAQa,GACJ,KAAK,IAID,GAHsB,QAAlBb,EAAOc,QAAoB3B,EAAK4B,OAAOC,eAAe,OACtDC,GAAQC,KAAK,cAEb/B,EAAK4B,OAAQ,CACb,IAAMI,EAAmB,GACzB,IAAK,IAAMC,KAAOjC,EAAK4B,OACf5B,EAAK4B,OAAOK,IACZD,EAAiBD,KAAK/B,EAAK4B,OAAOK,IAG1C,MAAMD,EAAiBE,OAEvBC,IAAMZ,MAAMvB,GAEhB,MACJ,KAAK,IACDmC,IAAMZ,MAAM,gBACZ,MACJ,KAAK,IACDO,GAAQC,KAAK,cACb,MACJ,KAAK,IACDhB,EAAMC,YAAYoB,eAAepC,GACjC8B,GAAQC,KAAK,iBAGrB,OAAOM,QAAQC,OAAOf,MAG1B,IAAMgB,EAAe,SAAIpB,GAAJ,OAAmCA,EAASnB,MAE3DwC,EACG,SAAIC,GAAJ,OAAoBnC,IAAMoC,IAAOD,GAAKE,KAAKJ,IAD9CC,EAEI,SAAIC,EAAaG,GAAjB,OAA8BtC,IAAMuC,KAAQJ,EAAKG,GAAMD,KAAKJ,IAFhEC,EAGG,SAAIC,EAAaG,GAAjB,OAA8BtC,IAAMwC,IAAOL,EAAKG,GAAMD,KAAKJ,IAH9DC,EAIG,SAAIC,GAAJ,OAAoBnC,IAAMyC,OAAUN,GAAKE,KAAKJ,IA6CxCS,EAND,CACVC,WArCe,CACfC,KAAM,SAACC,GAAD,OAA6B7C,IAAMoC,IAAiC,cAAe,CAAES,WACtFR,KAAKJ,IACVa,QAAS,SAACC,GAAD,OAAgBb,EAAA,sBAAsCa,KAC/DC,OAAQ,SAACC,GAAD,OAAkCf,EAAoB,cAAee,IAC7EC,OAAQ,SAACD,GAAD,OAAkCf,EAAA,sBAAkCe,EAASF,IAAME,IAC3FR,OAAQ,SAACM,GAAD,OAAgBb,EAAA,sBAAkCa,KAC1DI,OAAQ,SAACJ,GAAD,OAAgBb,EAAA,sBAAmCa,EAAnC,WAAgD,MA+BxEK,QA5BY,CACZC,QAAS,kBAAMnB,EAAmB,aAClCoB,MAAO,SAACC,GAAD,OAA0BrB,EAAoB,iBAAkBqB,IACvEC,SAAU,SAACD,GAAD,OAA0BrB,EAAoB,oBAAqBqB,IAC7EE,QAAS,SAACC,GAAD,OAAyBxB,EAAA,uCAAoDwB,GAAe,MAyBrGC,SAtBa,CACbvB,IAAK,SAACwB,GAAD,OAAsB1B,EAAA,oBAAmC0B,KAC9DC,YAAa,SAACC,GACV,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAQH,GACjB9D,IAAMuC,KAAY,SAAUwB,EAAU,CACzCpD,QAAS,CAAE,eAAgB,0BAGnCuD,aAAc,SAACnB,GAAD,OAAgBb,EAAA,kBAAyBa,EAAzB,YAAuC,KACrEoB,YAAa,SAACpB,GAAD,OAAgBb,EAAA,kBAAwBa,KACrDqB,cAAe,SAACC,GAAD,OAA+BnC,EAAA,YAA0BmC,IACxEC,gBAAiB,SAACV,GAAD,OAAsB1B,EAAA,kBAAyB0B,GAAY,KAC5EW,eAAgB,SAACX,EAAkBY,GAAnB,OACZtC,EAAA,kBAAmC0B,EAAnC,sBAAyDY,KAC7DC,eAAgB,SAACb,EAAkBY,GAAnB,OACZtC,EAAA,oBAA0C0B,EAA1C,iCAA2EY,OC1FtEE,EACT,WAAYC,GAA4B,oBACpCC,OAAOC,OAAOjF,KAAM+E,IAIfG,EAST,WAAY7B,GAAgC,yBAR5CF,QAAcgC,EAQ6B,KAP3CC,MAAgB,GAO2B,KAN3CC,SAAmB,GAMwB,KAL3CC,YAAsB,GAKqB,KAJ3CC,KAAoB,KAIuB,KAH3CC,KAAe,GAG4B,KAF3CC,MAAgB,GAGRpC,IACArD,KAAKmD,GAAKE,EAASF,GACnBnD,KAAKoF,MAAQ/B,EAAS+B,MACtBpF,KAAKqF,SAAWhC,EAASgC,SACzBrF,KAAKsF,YAAcjC,EAASiC,YAC5BtF,KAAKuF,KAAOlC,EAASkC,KACrBvF,KAAKyF,MAAQpC,EAASoC,MACtBzF,KAAKwF,KAAOnC,EAASmC,OC3BpBE,EACV,WAAY/B,GAAa,oBACtB3D,KAAKgE,SAAWL,EAAKK,SACrBhE,KAAK2F,YAAchC,EAAKgC,YACxB3F,KAAK4F,MAAQjC,EAAKiC,OCRHC,E,WAYjB,aAAe,IAAD,gCAVdC,iBAAmB,IAAIC,IAUT,KATdC,sBAAyCb,EAS3B,KARdc,UAAW,EAQG,KAPdC,SAAU,EAOI,KANdC,gBAAiB,EAMH,KALdpG,WAAgC,KAKlB,KAJdqG,aAAe,IAAInG,EAIL,KAHd2E,WAAY,IAAImB,KAAMM,IAAI,OAAO,GAGnB,KAcdC,gBAAkB,SAACF,GACf,EAAKA,aAAeA,GAfV,KAkBdG,aAAe,SAAC3B,EAAmB4B,GAC/B,IAAMC,EAAiB,WACnB,EAAK7B,UAAU8B,SAAQ,SAACF,EAAOzE,GACf,cAARA,GAAqB,EAAK6C,UAAU/B,OAAOd,OAGvD,OAAQ6C,GACJ,IAAK,MACD6B,IACA,EAAK7B,UAAUyB,IAAI,OAAO,GAC1B,MACJ,IAAK,UACDI,IACA,EAAK7B,UAAUyB,IAAI,WAAW,GAC9B,MAEJ,IAAK,SACDI,IACA,EAAK7B,UAAUyB,IAAI,UAAU,GAC7B,MAEJ,IAAK,YACD,EAAKzB,UAAU/B,OAAO,aACtB,EAAK+B,UAAUyB,IAAI,YAAaG,KAzC9B,KA8EdG,eA9Ec,sBA8EG,4BAAAzF,EAAA,6DACb,EAAKiF,gBAAiB,EADT,kBAGYrD,EAAMC,WAAWC,KAAK,EAAK4D,aAHvC,QAGHC,EAHG,QAIF/G,KAAK4G,SAAQ,SAAArD,GAChB,EAAKyD,YAAYzD,MAErB,EAAK0D,cAAcF,EAAO9G,YAC1B,EAAKiH,mBAAkB,GARd,kDAUT1F,QAAQC,IAAR,MACA,EAAKyF,mBAAkB,GAXd,0DA9EH,KA8FdD,cAAgB,SAAChH,GACb,EAAKA,WAAaA,GA/FR,KAkGdkH,aAlGc,uCAkGC,WAAO9D,GAAP,eAAAjC,EAAA,2DACPmC,EAAW,EAAK6D,YAAY/D,IADrB,uBAGP,EAAK6C,iBAAmB3C,EAHjB,kBAIAA,GAJA,cAMP,EAAK8C,gBAAiB,EANf,mBAQcrD,EAAMC,WAAWG,QAAQC,GARvC,eAQHE,EARG,OASH,EAAKyD,YAAYzD,GACjB8D,aAAY,WACR,EAAKnB,iBAAmB3C,KAE5B,EAAK2D,mBAAkB,GAbpB,kBAcI3D,GAdJ,kCAgBH/B,QAAQC,IAAR,MACA,EAAKyF,mBAAkB,GAjBpB,0DAlGD,2DAuHNF,YAAc,SAACzD,GACnB,IACU,EADJM,EAAO9C,EAAMuG,UAAUzD,KACzBA,IACAN,EAASgE,QAAUhE,EAASiE,UAAWC,MACnC,SAAArG,GAAC,OAAIA,EAAE8C,WAAaL,EAAKK,YAE7BX,EAASmE,OAASnE,EAASoE,eAAiB9D,EAAKK,SACjDX,EAASqE,KAAT,UAAgBrE,EAASiE,iBAAzB,aAAgB,EAAoBK,MAAK,SAAAC,GAAC,OAAIA,EAAE5D,WAAaX,EAASoE,iBAG1EpE,EAASkC,KAAO,IAAIsC,KAAKxE,EAASkC,MAClC,EAAKO,iBAAiBO,IAAIhD,EAASF,GAAIE,IAlI7B,KAoIN6D,YAAc,SAAC/D,GACnB,OAAO,EAAK2C,iBAAiBtD,IAAIW,IArIvB,KAwId6D,kBAAoB,SAACc,GACjB,EAAK3B,eAAiB2B,GAzIZ,KA4IdC,eA5Ic,uCA4IG,WAAO1E,GAAP,mBAAAnC,EAAA,6DACPyC,EAAO9C,EAAMuG,UAAUzD,KACvBqE,EAAW,IAAItC,EAAQ/B,GAFhB,kBAIHb,EAAMC,WAAWK,OAAOC,GAJrB,QAKH4E,EAAc,IAAInD,EAASzB,IACrBoE,aAAe9D,EAAMK,SACjCiE,EAAYX,UAAY,CAACU,GACzB,EAAKlB,YAAYmB,GACjBd,aAAY,WACR,EAAKnB,iBAAmBiC,KAVnB,kDAaT3G,QAAQC,IAAR,MAbS,0DA5IH,2DA6Jd2G,eA7Jc,uCA6JG,WAAO7E,GAAP,SAAAnC,EAAA,+EAEH4B,EAAMC,WAAWO,OAAOD,GAFrB,OAGT8D,aAAY,WACR,GAAI9D,EAASF,GAAI,CACb,IAAIgF,EAAe,2BAAQ,EAAKjB,YAAY7D,EAASF,KAAQE,GAC7D,EAAKyC,iBAAiBO,IAAIhD,EAASF,GAAIgF,GACvC,EAAKnC,iBAAmBmC,MAPvB,+CAWT7G,QAAQC,IAAR,MAXS,wDA7JH,2DA4Kd6G,eA5Kc,uCA4KG,WAAOjF,GAAP,SAAAjC,EAAA,6DACb,EAAKgF,SAAU,EADF,kBAGHpD,EAAMC,WAAWF,OAAOM,GAHrB,OAITgE,aAAY,WACR,EAAKrB,iBAAiBjD,OAAOM,GAC7B,EAAK+C,SAAU,KANV,gDAST5E,QAAQC,IAAR,MACA4F,aAAY,WACR,EAAKjB,SAAU,KAXV,yDA5KH,2DA4LdmC,iBA5Lc,sBA4LK,4BAAAnH,EAAA,6DACTyC,EAAO9C,EAAMuG,UAAUzD,KAC7B,EAAKuC,SAAU,EAFA,kBAILpD,EAAMC,WAAWQ,OAAO,EAAKyC,iBAAkB7C,IAJ1C,OAKXgE,aAAY,WAAO,IAAD,EACd,aAAI,EAAKnB,wBAAT,aAAI,EAAuBqB,QAAS,CAAC,IAAD,EAChC,EAAKrB,iBAAiBsB,UAAtB,UACI,EAAKtB,iBAAiBsB,iBAD1B,aACI,EAAiCgB,QAAO,SAAApH,GAAC,OAAIA,EAAE8C,YAAF,OAAeL,QAAf,IAAeA,OAAf,EAAeA,EAAMK,aACtE,EAAKgC,iBAAiBqB,SAAU,MAC7B,CAAC,IAAD,IACGW,EAAW,IAAItC,EAAQ/B,GAC7B,YAAKqC,wBAAL,mBAAuBsB,iBAAvB,SAAkCzF,KAAKmG,GACvC,EAAKhC,iBAAkBqB,SAAU,EAErC,EAAKvB,iBAAiBO,IAAI,EAAKL,iBAAkB7C,GAAI,EAAK6C,qBAfnD,gDAmBX1E,QAAQC,IAAR,MAnBW,yBAqBX4F,aAAY,kBAAM,EAAKjB,SAAU,KArBtB,4EA5LL,KAsNdqC,qBAtNc,sBAsNS,sBAAArH,EAAA,6DACnB,EAAKgF,SAAU,EADI,kBAGTpD,EAAMC,WAAWQ,OAAO,EAAKyC,iBAAkB7C,IAHtC,OAIfgE,aAAY,WAAO,IAAD,EACd,EAAKnB,iBAAkBwC,cAAc,UAAC,EAAKxC,wBAAN,aAAC,EAAuBwC,aAC7D,EAAK1C,iBAAiBO,IAAI,EAAKL,iBAAkB7C,GAAI,EAAK6C,qBAN/C,gDASf1E,QAAQC,IAAR,MATe,yBAWf4F,aAAY,kBAAM,EAAKjB,SAAU,KAXlB,4EAtNT,KAqOduC,sBAAwB,WACpB,EAAKzC,sBAAmBb,GAtOd,KAyOduD,wBAA0B,SAAC1E,GACvB,EAAK8B,iBAAiBY,SAAQ,SAAArD,GAC1BA,EAASiE,UAAUZ,SAAQ,SAAAsB,GACnBA,EAAShE,WAAaA,IACtBgE,EAASW,UAAYX,EAASY,iBAAmBZ,EAASY,iBAC1DZ,EAASW,WAAaX,EAASW,kBA7O3CE,YAAmB7I,MAEnB8I,aAEI,kBAAM,EAAKlE,UAAUmE,UACrB,WACI,EAAK3C,aAAe,IAAInG,EACxB,EAAK6F,iBAAiBkD,QACtB,EAAKrC,oB,6CAqCjB,WACI,IAAM1D,EAAS,IAAIgG,gBAanB,OAZAhG,EAAOoB,OAAO,aAAcrE,KAAKoG,aAAalG,WAAWgJ,YACzDjG,EAAOoB,OAAO,WAAYrE,KAAKoG,aAAajG,SAAS+I,YACrDlJ,KAAK4E,UAAU8B,SAAQ,SAACF,EAAOzE,GAEf,cAARA,EAGAkB,EAAOoB,OAAOtC,EAAMyE,EAAe2C,eAEnClG,EAAOoB,OAAOtC,EAAKyE,MAGpBvD,I,4BAGX,WACI,OAAOmG,MAAMC,KAAKrJ,KAAK8F,iBAAiBwD,UAAUC,MAAK,SAACrI,EAAGsI,GAAJ,OACnDtI,EAAEqE,KAAMkE,UAAYD,EAAEjE,KAAMkE,e,6BAGpC,WACI,OAAOzE,OAAO0E,QACV1J,KAAK2J,iBAAiBC,QAAO,SAACC,EAAYxG,GACtC,IAAMkC,EAAOuE,kBAAOzG,EAASkC,KAAO,eAEpC,OADAsE,EAAWtE,GAAQsE,EAAWtE,GAAX,sBAAuBsE,EAAWtE,IAAlC,CAAyClC,IAAY,CAACA,GAClEwG,IACR,S,cC1FME,E,WAYjB,aAAe,IAAD,gCAXdtF,QAA0B,KAWZ,KAVduF,gBAAiB,EAUH,KATdC,WAAY,EASE,KARd/D,SAAU,EAQI,KAPdgE,WAAwB,GAOV,KANdC,mBAAoB,EAMN,KALdC,UAAY,EAKE,KAJdC,eAAiC,GAInB,KAHdC,mBAAoB,EAGN,KAgBdC,aAAe,SAACH,GACZ,EAAKA,UAAYA,GAjBP,KA6BdI,YA7Bc,uCA6BA,WAAOxG,GAAP,eAAA9C,EAAA,6DACV,EAAK8I,gBAAiB,EADZ,kBAGgBlH,EAAMiB,SAASvB,IAAIwB,GAHnC,OAGAS,EAHA,OAIN0C,aAAY,WACR,EAAK1C,QAAUA,EACf,EAAKuF,gBAAiB,KANpB,gDASN1I,QAAQC,IAAR,MACA4F,aAAY,kBAAM,EAAK6C,gBAAiB,KAVlC,yDA7BA,2DA2Cd/F,YA3Cc,uCA2CA,WAAOC,GAAP,iBAAAhD,EAAA,6DACV,EAAK+I,WAAY,EADP,kBAGiBnH,EAAMiB,SAASE,YAAYC,GAH5C,OAGAjD,EAHA,OAIAwJ,EAAQxJ,EAASnB,KACvBqH,aAAY,WACW,IAAD,EAAd,EAAK1C,UACL,YAAKA,QAAQiG,cAAb,SAAqB7I,KAAK4I,GAEtBA,EAAME,QAAU9J,EAAMuG,UAAUzD,OAChC9C,EAAMuG,UAAUwD,SAASH,EAAMlI,KAC/B,EAAKkC,QAAQmB,MAAQ6E,EAAMlI,MAGnC,EAAK0H,WAAY,KAdf,gDAiBN3I,QAAQC,IAAR,MACA4F,aAAY,kBAAM,EAAK8C,WAAY,KAlB7B,yDA3CA,2DAiEd3F,aAjEc,uCAiEC,WAAOmG,GAAP,SAAAvJ,EAAA,6DACX,EAAKgF,SAAU,EADJ,kBAGDpD,EAAMiB,SAASO,aAAamG,EAAMtH,IAHjC,OAIPtC,EAAMuG,UAAUwD,SAASH,EAAMlI,KAC/B4E,aAAY,WACJ,EAAK1C,SAAW,EAAKA,QAAQiG,SAC7B,EAAKjG,QAAQiG,OAAO/C,MAAK,SAAAkD,GAAC,OAAIA,EAAEF,UAASA,QAAS,EAClD,EAAKlG,QAAQiG,OAAO/C,MAAK,SAAAkD,GAAC,OAAIA,EAAE1H,KAAOsH,EAAMtH,MAAKwH,QAAS,EAC3D,EAAKlG,QAAQmB,MAAQ6E,EAAMlI,IAC3B,EAAK2D,SAAU,MAVhB,gDAcPiB,aAAY,kBAAM,EAAKjB,SAAU,KACjC5E,QAAQC,IAAR,MAfO,yDAjED,2DAoFdgD,YApFc,uCAoFA,WAAOkG,GAAP,SAAAvJ,EAAA,6DACV,EAAKgF,SAAU,EADL,kBAGApD,EAAMiB,SAASQ,YAAYkG,EAAMtH,IAHjC,OAINgE,aAAY,WACW,IAAD,EAAd,EAAK1C,UACL,EAAKA,QAAQiG,OAAb,UAAsB,EAAKjG,QAAQiG,cAAnC,aAAsB,EAAqBpC,QAAO,SAAAuC,GAAC,OAAIA,EAAE1H,KAAOsH,EAAMtH,MACtE,EAAK+C,SAAU,MAPjB,gDAWNiB,aAAY,kBAAM,EAAKjB,SAAU,KACjC5E,QAAQC,IAAR,MAZM,yDApFA,2DAoGdiD,cApGc,uCAoGE,WAAOC,GAAP,SAAAvD,EAAA,6DACZ,EAAKgF,SAAU,EADH,kBAGFpD,EAAMiB,SAASS,cAAcC,GAH3B,OAIR0C,aAAY,WAAO,IAAD,EACV1C,EAAQkB,aAAelB,EAAQkB,eAAR,UACvB9E,EAAMuG,UAAUzD,YADO,aACvB,EAAsBgC,cACtB9E,EAAMuG,UAAU0D,eAAerG,EAAQkB,aAE3C,EAAKlB,QAAL,2BAAoB,EAAKA,SAAYA,GACrC,EAAKyB,SAAU,KAVX,gDAaR5E,QAAQC,IAAR,MACA4F,aAAY,kBAAM,EAAKjB,SAAU,KAdzB,yDApGF,2DAuHdxB,gBAvHc,uCAuHI,WAAOV,EAAkB2E,GAAzB,SAAAzH,EAAA,6DACd,EAAKgF,SAAU,EADD,kBAGJpD,EAAMiB,SAASW,gBAAgBV,GAH3B,OAKVnD,EAAMkK,cAAcrC,wBAAwB1E,GAC5CmD,aAAY,WAAO,IAAD,IACV,EAAK1C,SAAW,EAAKA,QAAQT,YAAb,UAA0BnD,EAAMuG,UAAUzD,YAA1C,aAA0B,EAAsBK,WAAY,EAAKS,QAAQT,WAAaA,IACtG2E,EAAY,EAAKlE,QAAQmE,iBAAmB,EAAKnE,QAAQmE,iBACzD,EAAKnE,QAAQkE,WAAa,EAAKlE,QAAQkE,WAEvC,EAAKlE,SAAW,EAAKA,QAAQT,YAAb,UAA0BnD,EAAMuG,UAAUzD,YAA1C,aAA0B,EAAsBK,YAChE2E,EAAY,EAAKlE,QAAQuG,iBAAmB,EAAKvG,QAAQuG,kBAE7D,EAAKd,WAAWxD,SAAQ,SAAAjC,GAChBA,EAAQT,WAAaA,IACrBS,EAAQkE,UAAYlE,EAAQmE,iBAAmBnE,EAAQmE,iBACvDnE,EAAQkE,WAAalE,EAAQkE,cAGrC,EAAKzC,SAAU,KApBT,gDAuBV5E,QAAQC,IAAR,MACA4F,aAAY,kBAAM,EAAKjB,SAAU,KAxBvB,yDAvHJ,6DAmJd+E,eAnJc,uCAmJG,WAAOrG,GAAP,eAAA1D,EAAA,6DACb,EAAKiJ,mBAAoB,EADZ,kBAGgBrH,EAAMiB,SAASY,eAAe,EAAKF,QAAST,SAAUY,GAHtE,OAGHsF,EAHG,OAIT/C,aAAY,WACR,EAAK+C,WAAaA,EAClB,EAAKC,mBAAoB,KANpB,gDAST7I,QAAQC,IAAR,MACA4F,aAAY,kBAAM,EAAKgD,mBAAoB,KAVlC,yDAnJH,2DAiKde,mBAjKc,uCAiKO,WAAOlH,EAAkBY,GAAzB,eAAA1D,EAAA,6DACjB,EAAKoJ,mBAAoB,EADR,kBAGYxH,EAAMiB,SAASc,eAAeb,EAAUY,GAHpD,OAGPiF,EAHO,OAIb1C,aAAY,WACR,EAAKkD,eAAiBR,EACtB,EAAKS,mBAAoB,KANhB,gDAUbhJ,QAAQC,IAAR,MACA4F,aAAY,kBAAM,EAAKmD,mBAAoB,KAX9B,yDAjKP,wDACVzB,YAAmB7I,MAEnB8I,aACI,kBAAM,EAAKsB,aACX,SAAAA,GACI,GAAkB,IAAdA,GAAiC,IAAdA,EAAiB,CACpC,IAAMxF,EAA0B,IAAdwF,EAAkB,YAAc,YAClD,EAAKa,eAAerG,QAEpB,EAAKsF,WAAa,M,+CAWlC,WACI,SAAIrJ,EAAMuG,UAAUzD,OAAQ3D,KAAKyE,UACtB5D,EAAMuG,UAAUzD,KAAKK,WAAahE,KAAKyE,QAAQT,a,KClC7CmH,E,WAKjB,aAAe,IAAD,gCAJdxH,KAAoB,KAIN,KAHdyH,cAA+B,KAGjB,KAFdC,WAAY,EAEE,KASd3H,MATc,uCASN,WAAO4H,GAAP,eAAApK,EAAA,+EAEmB4B,EAAMU,QAAQE,MAAM4H,GAFvC,OAEM3H,EAFN,OAGA9C,EAAMC,YAAYyK,SAAS5H,EAAK/C,OAChCuG,aAAY,kBAAM,EAAKxD,KAAOA,KAC9B/B,GAAQC,KAAK,eACbhB,EAAM2K,WAAWC,aANjB,uHATM,2DAqBdC,OAAS,WACL7K,EAAMC,YAAYyK,SAAS,MAC3BI,OAAOC,aAAaC,WAAW,OAC/B,EAAKlI,KAAO,KAEZ/B,GAAQC,KAAK,MA1BH,KA8BdiK,QA9Bc,sBA8BJ,4BAAA5K,EAAA,+EAEiB4B,EAAMU,QAAQC,UAF/B,OAEIE,EAFJ,OAGFwD,aAAY,kBAAM,EAAKxD,KAAOA,KAH5B,gDAKFrC,QAAQC,IAAR,MALE,yDA9BI,KAuCdqC,SAvCc,uCAuCH,WAAO0H,GAAP,eAAApK,EAAA,+EAEgB4B,EAAMU,QAAQI,SAAS0H,GAFvC,OAEG3H,EAFH,OAGH9C,EAAMC,YAAYyK,SAAS5H,EAAK/C,OAChCuG,aAAY,kBAAM,EAAKxD,KAAOA,KAC9B/B,GAAQC,KAAK,eACbhB,EAAM2K,WAAWC,aANd,uHAvCG,2DAmDdb,SAAW,SAAChF,GACJ,EAAKjC,OAAM,EAAKA,KAAKiC,MAAQA,IApDvB,KAuDdkF,eAAiB,SAACiB,GACV,EAAKpI,OAAM,EAAKA,KAAKgC,YAAcoG,IAxD7B,KA2DdC,uBA3Dc,sBA2DW,sBAAA9K,EAAA,sDACrByK,OAAOM,GAAGC,gBAAe,SAAAjL,GACG,cAApBA,EAASO,SACT,EAAK4J,cAAgBnK,EAASkL,aAAarI,gBAH9B,2CA3DX,KAmEdsI,cAAgB,WACZ,EAAKf,WAAY,EACjB,IAAMgB,EAAW,SAACvI,GACdhB,EAAMU,QAAQK,QAAQC,GAAarB,MAAK,SAAAkB,GACpC9C,EAAMC,YAAYyK,SAAS5H,EAAK/C,OAEhCuG,aAAY,WACR,EAAKxD,KAAOA,EACZ,EAAK0H,WAAY,KAErBzJ,GAAQC,KAAK,kBACdyK,OAAM,SAAAjL,GACLC,QAAQC,IAAIF,GACZ8F,aAAY,kBAAM,EAAKkE,WAAY,SAGvC,EAAKD,cACLiB,EAAS,EAAKjB,eAEdO,OAAOM,GAAGvI,OAAM,SAAAzC,GACZoL,EAASpL,EAASkL,aAAarI,eAChC,CAACyI,MAAO,0BAvFf1D,YAAmB7I,M,4CAGvB,WAEI,QAASA,KAAK2D,S,KCAT9C,EAAe,CACxBkK,cAAe,IAAIlF,EACnB/E,YAAa,ICXb,aAAe,IAAD,gCAJdO,MAA4B,KAId,KAHdT,MAAwB+K,OAAOC,aAAaY,QAAQ,OAGtC,KAFdC,WAAY,EAEE,KAedvK,eAAiB,SAACb,GACd,EAAKA,MAAQA,GAhBH,KAmBdkK,SAAW,SAAC3K,GACR,EAAKA,MAAQA,GApBH,KAuBd8L,aAAe,WACX,EAAKD,WAAY,GAvBjB5D,YAAmB7I,MAEnB8I,aACI,kBAAM,EAAKlI,SACX,SAAAA,GACOA,EACC+K,OAAOC,aAAae,QAAQ,MAAO/L,GAEnC+K,OAAOC,aAAaC,WAAW,WDG/CzE,UAAW,IAAI+D,EACfK,WAAY,IERZ,aAAe,IAAD,gCALdoB,MAAe,CACXC,MAAM,EACNnK,KAAM,MAGI,KAIdoK,UAAY,SAACC,GACT,EAAKH,MAAMC,MAAO,EAClB,EAAKD,MAAMlK,KAAOqK,GANR,KASdtB,WAAa,WACT,EAAKmB,MAAMC,MAAO,EAClB,EAAKD,MAAMlK,KAAO,MAVlBmG,YAAmB7I,OFQvBgN,aAAc,IAAIjD,EAClBkD,aAAc,IGdd,aAAe,IAAD,gCAHdC,SAA0B,GAGZ,KAFdC,cAAsC,KAExB,KAIdC,oBAAsB,SAACC,GACfxM,EAAMkK,cAAc/E,mBACpB,EAAKmH,eAAgB,IAAIG,KACpBC,QAAQhN,oBAAkD8M,EAAY,CACnEG,mBAAoB,kCAAM3M,EAAMuG,UAAUzD,YAAtB,aAAM,EAAsB/C,SAEnD6M,yBACAC,iBAAiBC,IAASC,aAC1BC,QAEL,EAAKV,cAAcW,QAAQxB,OAAM,SAAAjL,GAAK,OAAIC,QAAQC,IAAI,sCAAuCF,MAE7F,EAAK8L,cAAcY,GAAG,gBAAgB,SAACb,GACnC/F,aAAY,WACR+F,EAASxG,SAAQ,SAAAsH,GACbA,EAAQC,UAAY,IAAIpG,KAAKmG,EAAQC,UAAY,QAErD,EAAKf,SAAWA,QAIxB,EAAKC,cAAcY,GAAG,kBAAkB,SAACC,GACrC7G,aAAY,WACR6G,EAAQC,UAAY,IAAIpG,KAAKmG,EAAQC,WACrC,EAAKf,SAASgB,QAAQF,WA5BxB,KAkCdG,kBAAoB,WAAO,IAAD,EACtB,YAAKhB,qBAAL,SAAoBiB,OAAO9B,OAAM,SAAAjL,GAAK,OAAIC,QAAQC,IAAI,8BAA+BF,OAnC3E,KAsCdgN,cAAgB,WACZ,EAAKnB,SAAW,GAChB,EAAKiB,qBAxCK,KA2CdG,WA3Cc,uCA2CD,WAAOhF,GAAP,iBAAApI,EAAA,6DACToI,EAAO+D,WAAP,UAAoBxM,EAAMkK,cAAc/E,wBAAxC,aAAoB,EAAsC7C,GADjD,4BAGC,EAAKgK,qBAHN,aAGC,EAAoBoB,OAAO,cAAejF,GAH3C,sDAKLhI,QAAQC,IAAR,MALK,wDA3CC,sDACVsH,YAAmB7I,QHgBdwO,EAAeC,wBAAc5N,GAEnC,SAAS6N,IACZ,OAAOC,qBAAWH,G,WIvBPI,eAAS,WACpB,MAAwCF,IAAhCtH,UAAazD,EAArB,EAAqBA,KAAM+H,EAA3B,EAA2BA,OAC3B,OACI,cAACmD,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAArB,SACI,eAACC,EAAA,EAAD,WACI,eAACH,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,OAAK,EAACC,GAAG,IAAIC,QAAM,EAA3C,UACI,qBAAKC,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAEC,YAAa,UADjE,iBAIA,cAACb,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASE,GAAG,cAActD,KAAK,eAC9C,cAAC8C,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASE,GAAG,UAAUtD,KAAK,WAC1C,cAAC8C,EAAA,EAAKI,KAAN,UACI,cAACU,EAAA,EAAD,CAAQT,GAAIC,IAASE,GAAG,kBAAkBO,UAAQ,EAAC7C,QAAQ,sBAE/D,eAAC8B,EAAA,EAAKI,KAAN,CAAWY,SAAS,QAApB,UACI,cAACC,EAAA,EAAD,CAAOP,KAAS,OAAJ5L,QAAI,IAAJA,OAAA,EAAAA,EAAMiC,QAAS,mBAAoBmK,QAAM,EAACC,OAAO,UAC7D,cAACC,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,OAAExM,QAAF,IAAEA,OAAF,EAAEA,EAAMgC,YAA1C,SACI,eAACsK,EAAA,EAASpB,KAAV,WACI,cAACoB,EAAA,EAAShB,KAAV,CAAeC,GAAIkB,IAAMf,GAAE,2BAAe1L,QAAf,IAAeA,OAAf,EAAeA,EAAMK,UAC5CmM,KAAK,aAAaE,KAAK,SAC3B,cAACJ,EAAA,EAAShB,KAAV,CAAeqB,QAAS5E,EAAQyE,KAAK,SAASE,KAAK,0B,8DCpBhEzB,eAAS,WACpB,MAAmDF,IAA5C3D,cAAgBnG,EAAvB,EAAuBA,UAAW2B,EAAlC,EAAkCA,aAClC,OACI,qCACI,eAACsI,EAAA,EAAD,CAAM0B,UAAQ,EAACC,KAAK,QAAQf,MAAO,CAAEgB,MAAO,OAAQC,UAAW,IAA/D,UACI,cAACC,EAAA,EAAD,CAAQN,KAAK,SAASO,UAAQ,EAACC,MAAM,OAAO9D,QAAQ,YACpD,cAAC8B,EAAA,EAAKI,KAAN,CACIlC,QAAQ,gBACR+D,OAAQlM,EAAUmM,IAAI,OACtBT,QAAS,kBAAM/J,EAAa,MAAO,WAEvC,cAACsI,EAAA,EAAKI,KAAN,CACIlC,QAAQ,YACR+D,OAAQlM,EAAUmM,IAAI,WACtBT,QAAS,kBAAM/J,EAAa,UAAW,WAE3C,cAACsI,EAAA,EAAKI,KAAN,CACIlC,QAAQ,cACR+D,OAAQlM,EAAUmM,IAAI,UACtBT,QAAS,kBAAM/J,EAAa,SAAU,cAG9C,cAACoK,EAAA,EAAD,IACA,cAAC,IAAD,CACIK,SAAU,SAACzL,GAAD,OAAgBgB,EAAa,YAAahB,IACpDiB,MAAO5B,EAAUpC,IAAI,cAAgB,IAAIqF,a,wFCpB1C+G,gBAAS,YAA2C,IAAD,EAAlBnK,EAAkB,EAAlBA,QAC5C,EAAoCiK,IAA5B1B,EAAR,EAAQA,aAAc5F,EAAtB,EAAsBA,UACd1C,EAA6BsI,EAA7BtI,gBAAiBwB,EAAY8G,EAAZ9G,QACzB,IAAI,UAAAkB,EAAUzD,YAAV,eAAgBK,YAAaS,EAAQT,SAAU,OAAO,KAO1D,OACI,eAACiN,GAAA,EAAD,CAAQC,SAAS,OAAjB,UACI,cAACC,GAAA,EAAD,CAAeC,SAAO,EAAC3B,MAAO,CAAEgB,MAAO,QAAvC,SACI,cAACd,EAAA,EAAD,CACI0B,OAAK,EACLR,MAAM,OACN9D,QAAStI,EAAQkE,UAAY,YAAc,oBAEnD,cAACwI,GAAA,EAAD,CAAeG,QAAM,EAAC7B,MAAO,CAAEgB,MAAO,QAAtC,SACI,cAACd,EAAA,EAAD,CACI0B,OAAK,EACLE,OAAK,EACLV,MAAOpM,EAAQkE,UAAY,MAAQ,QACnCoE,QAAStI,EAAQkE,UAAY,WAAa,SAC1CzC,QAASA,EACToK,QAAS,SAACkB,GAAD,OApBzB,SAAsBA,EAAmBxN,GACrCwN,EAAEC,iBACFhN,EAAQkE,UAAYjE,EAAgBV,GAAU,GAASU,EAAgBV,GAAU,GAkBrD0N,CAAaF,EAAG/M,EAAQT,qBC1B7C4K,gBAAS,YAA0C,IAAnBnK,EAAkB,EAAlBA,QAM3C,OACI,eAACkN,GAAA,EAAD,CAAMzC,GAAIkB,IAAMf,GAAE,oBAAe5K,EAAQT,UAAzC,UACI,cAAC8L,EAAA,EAAD,CAAOP,IAAK9K,EAAQmB,OAAS,qBAC7B,eAAC+L,GAAA,EAAKC,QAAN,WACI,cAACD,GAAA,EAAKhB,OAAN,UAAclM,EAAQkB,cACtB,cAACgM,GAAA,EAAKE,YAAN,UAVZ,SAAkBC,GACd,GAAIA,EACA,OAAOA,EAAIC,OAAS,GAAKD,EAAIE,UAAU,EAAG,IAAM,MAAQF,EAQjCG,CAASxN,EAAQyN,UAExC,eAACP,GAAA,EAAKC,QAAN,CAAcO,OAAK,EAAnB,UACI,cAACC,GAAA,EAAD,CAAMrG,KAAK,SACVtH,EAAQmE,eAFb,gBAIA,cAAC,GAAD,CAAcnE,QAASA,UChBpBmK,gBAAS,YAAyD,IAArBtH,EAAoB,EAApBA,UAClD+K,EAAS,CACXC,YAAa,SACbC,YAAa,GAEjB,OACI,cAACC,GAAA,EAAD,CAAMC,YAAU,EAAhB,SACKnL,EAAUoL,KAAI,SAAA1K,GAAQ,OACnB,cAAC2K,GAAA,EAAD,CACIC,WAAS,EAETC,QACI,cAACL,GAAA,EAAKvD,KAAN,CAAmCC,GAAIkB,IAAMf,GAAE,oBAAerH,EAAShE,UAAvE,SACI,cAAC8L,EAAA,EAAD,CACIU,KAAK,OACLsC,UAAQ,EAACvD,IAAKvH,EAASpC,OAAS,mBAChCmN,UAAQ,EACRtD,MAAOzH,EAASW,UAAY0J,EAAS,QAL7BrK,EAAShE,UAJjC,SAcI,cAAC2O,GAAA,EAAMf,QAAP,UACI,cAAC,GAAD,CAAanN,QAASuD,OAbrBA,EAAShE,kBCVnB,SAASgP,GAAT,GAAgD,IAAD,IAAnB3P,EAAmB,EAAnBA,SACvC,OACI,eAAC4P,EAAA,EAAQC,MAAT,WACI,eAACD,EAAA,EAAD,WACK5P,EAASmF,aACN,cAAC2K,GAAA,EAAD,CAAOvC,SAAS,MAAMC,MAAM,MAAM9D,QAAQ,YAAY0C,MAAO,CAAC2D,UAAW,YAE7E,cAACnE,GAAA,EAAKiE,MAAN,UACI,eAACjE,GAAA,EAAD,WACI,cAACA,GAAA,EAAKa,MAAN,CAAYL,MAAO,CAAC4D,aAAc,GAAI7C,KAAK,OAAOsC,UAAQ,EAACvD,KAAK,UAAAlM,EAASqE,YAAT,eAAe9B,QAAS,qBACxF,eAACqJ,GAAA,EAAK2C,QAAN,WACI,cAAC3C,GAAA,EAAK0B,OAAN,CAAazB,GAAIkB,IAAMf,GAAE,sBAAiBhM,EAASF,IAAnD,SACKE,EAAS+B,QAEd,eAAC6J,GAAA,EAAK4C,YAAN,wBAA4B,cAAC,IAAD,CAAMxC,GAAE,oBAAehM,EAASoE,cAAhC,mBAAiDpE,EAASqE,YAA1D,aAAiD,EAAe/B,iBAC3FtC,EAASmE,QACN,cAACyH,GAAA,EAAK4C,YAAN,UACI,cAACsB,GAAA,EAAD,CAAO5B,OAAK,EAACV,MAAM,SAAnB,6CAKNxN,EAASgE,UAAYhE,EAASmE,QAC5B,cAACyH,GAAA,EAAK4C,YAAN,UACI,cAACsB,GAAA,EAAD,CAAO5B,OAAK,EAACV,MAAM,QAAnB,yDASxB,cAACoC,EAAA,EAAD,UACI,iCACI,cAACb,GAAA,EAAD,CAAMrG,KAAK,UADf,IAC2BjC,kBAAOzG,EAASkC,KAAO,uBAC9C,cAAC6M,GAAA,EAAD,CAAMrG,KAAK,WAAY1I,EAASoC,WAGxC,cAACwN,EAAA,EAAD,CAASK,WAAS,EAAlB,SACI,cAAC,GAAD,CAA0BhM,UAAWjE,EAASiE,cAElD,eAAC2L,EAAA,EAAD,CAASM,UAAQ,EAAjB,UACI,+BAAOlQ,EAASiC,cAChB,cAACqK,EAAA,EAAD,CACIT,GAAIkB,IACJf,GAAE,sBAAiBhM,EAASF,IAC5B0N,MAAM,OACN2C,QAAQ,QACRzG,QAAQ,eCtDb6B,oBAAS,WACpB,IACQ6E,EADkB/E,IAAlB3D,cACA0I,kBAER,OACI,mCACKA,EAAkBf,KAAI,mCAAEgB,EAAF,KAAS7J,EAAT,YACnB,eAAC,WAAD,WACI,cAAC8G,EAAA,EAAD,CAAQgD,KAAG,EAAC9C,MAAM,OAAlB,SACK6C,IAEJ7J,EAAW6I,KAAI,SAAArP,GAAQ,OACpB,cAAC2P,GAAD,CAAoC3P,SAAUA,GAAvBA,EAASF,SALzBuQ,W,UCVhB,SAASE,KACpB,OACI,cAAC,WAAD,UACI,cAACC,GAAA,EAAD,CAAaxC,OAAK,EAAC5B,MAAO,CAAEiB,UAAW,IAAvC,SACI,eAACuC,EAAA,EAAQC,MAAT,WACI,cAACD,EAAA,EAAD,CAASxD,MAAO,CAAEqE,UAAW,KAA7B,SACI,eAACD,GAAA,EAAD,WACI,eAACA,GAAA,EAAYlD,OAAb,CAAoB/K,OAAK,EAAzB,UACI,cAACiO,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,OAEJ,cAACF,GAAA,EAAYG,UAAb,UACI,cAACH,GAAA,EAAYE,KAAb,WAIZ,cAACd,EAAA,EAAD,UACI,eAACY,GAAA,EAAD,WACI,cAACA,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,SAGR,cAACd,EAAA,EAAD,CAASK,WAAS,EAAC7D,MAAO,CAAEqE,UAAW,MACvC,cAACb,EAAA,EAAD,CAASM,UAAQ,EAAjB,SACI,cAAC5D,EAAA,EAAD,CAAQsE,UAAQ,EAACpD,MAAM,OAAO2C,QAAQ,QAAQzG,QAAQ,kBChB/D6B,oBAAS,WACpB,IAAQ7D,EAAkB2D,IAAlB3D,cACApE,EAAkEoE,EAAlEpE,eAAgBb,EAAkDiF,EAAlDjF,iBAAkBQ,EAAgCyE,EAAhCzE,gBAAiBvG,EAAegL,EAAfhL,WAC3D,EAAsCmU,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAaA,OAJAC,qBAAU,WACFvO,EAAiB0K,MAAQ,GAAG7J,MACjC,CAACb,EAAiB0K,KAAM7J,IAGvB,eAAC2N,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAM,KAAnB,SACK1F,EAAc5E,iBAAmBgO,EAC9B,qCACI,cAACP,GAAD,IACA,cAACA,GAAD,OAIJ,cAAC,IAAD,CACIY,UAAW,EACXC,SAvBpB,WACIL,GAAe,GACf9N,EAAgB,IAAIrG,EAAaF,EAAY2U,YAAc,IAC3D/N,IAAiBlE,MAAK,kBAAM2R,GAAe,OAqB3BO,SAAUR,KAAiBpU,GACvBA,EAAW2U,YAAc3U,EAAW6U,WACxCC,aAAa,EALjB,SAOI,cAAC,GAAD,QAKZ,cAACP,EAAA,EAAKC,OAAN,CAAa9D,MAAM,IAAnB,SACI,cAAC,EAAD,MAEJ,cAAC6D,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,cAACqE,EAAA,EAAD,CAAQhE,OAAQqD,Y,sCC1CjB,SAASY,GAAYC,GAChC,MAAsBC,aAASD,EAAMjJ,MAArC,mBAAOmJ,EAAP,KAAcC,EAAd,KACA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAYhU,MAAO8T,EAAKG,WAAaH,EAAK9T,MAA1C,UACI,gCAAQ2T,EAAMO,QACd,iDAAWL,GAAWF,IACrBG,EAAKG,SAAWH,EAAK9T,MAClB,cAAC8R,GAAA,EAAD,CAAO5B,OAAK,EAACV,MAAM,MAAnB,SAA0BsE,EAAK9T,QAC/B,QCZDuN,oBAAS,WACpB,IAAQxH,EAAcsH,IAAdtH,UACR,OACI,cAAC,KAAD,CACIoO,cAAe,CAAEC,MAAO,GAAIC,SAAU,GAAIrU,MAAO,MACjDsU,SAAU,SAACrM,EAAD,OAAWsM,EAAX,EAAWA,UAAX,OAA2BxO,EAAU1D,MAAM4F,GAAQgD,OAAM,SAAAjL,GAAK,OACpEuU,EAAU,CAAEvU,MAAO,kCAH3B,SAKK,gBAAGwU,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAcpU,EAA/B,EAA+BA,OAA/B,OACG,eAAC,KAAD,CAAMqU,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACrF,EAAA,EAAD,CAAQzB,GAAG,KAAKnC,QAAQ,wBAAwB8D,MAAM,OAAOuC,UAAU,WACvE,cAAC2B,GAAD,CAAahJ,KAAK,QAAQkK,YAAY,UACtC,cAAClB,GAAD,CAAahJ,KAAK,WAAWkK,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACInK,KAAK,QAAQoK,OAAQ,kBAAM,cAAChD,GAAA,EAAD,CAAO1D,MAAO,CAAE4D,aAAc,IAAM9B,OAAK,EAACV,MAAM,MAAM9D,QAASrL,EAAOL,WAErG,cAACsO,EAAA,EAAD,CAAQzJ,QAAS4P,EAAclG,UAAQ,EAAC7C,QAAQ,QAAQmJ,KAAK,SAAS7E,OAAK,a,mBChBhF,SAAS+E,GAAT,GAA8C,IAAlB1U,EAAiB,EAAjBA,OACvC,OACI,cAAC2U,GAAA,EAAD,CAAShV,OAAK,EAAd,SACKK,GACG,cAAC2U,GAAA,EAAQ7D,KAAT,UACK9Q,EAAOgR,KAAI,SAAC4D,EAAUC,GAAX,OACR,cAACF,GAAA,EAAQpH,KAAT,UAAuBqH,GAAJC,UCJ5B3H,oBAAS,WACpB,IAAQxH,EAAcsH,IAAdtH,UACR,OACI,cAAC,KAAD,CACIoO,cAAe,CAAE7P,YAAa,GAAI3B,SAAU,GAAIyR,MAAO,GAAIC,SAAU,GAAIrU,MAAO,MAChFsU,SAAU,SAACrM,EAAD,OAAWsM,EAAX,EAAWA,UAAX,OAA2BxO,EAAUxD,SAAS0F,GAAQgD,OAAM,SAAAjL,GAAK,OACvEuU,EAAU,CAAEvU,cAChBmV,iBAAkBC,KAAW,CACzB9Q,YAAa8Q,OAAaC,WAC1B1S,SAAUyS,OAAaC,WACvBjB,MAAOgB,OAAaC,WAAWjB,QAC/BC,SAAUe,OAAaC,aAR/B,SAWK,gBAAGb,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAcpU,EAA/B,EAA+BA,OAAQiV,EAAvC,EAAuCA,QAASC,EAAhD,EAAgDA,MAAhD,OACG,eAAC,KAAD,CAAMb,UAAU,gBAAgBJ,SAAUE,EAAcG,aAAa,MAArE,UACI,cAACrF,EAAA,EAAD,CAAQzB,GAAG,KAAKnC,QAAQ,0BAA0B8D,MAAM,OAAOuC,UAAU,WACzE,cAAC2B,GAAD,CAAahJ,KAAK,cAAckK,YAAY,iBAC5C,cAAClB,GAAD,CAAahJ,KAAK,WAAWkK,YAAY,aACzC,cAAClB,GAAD,CAAahJ,KAAK,QAAQkK,YAAY,UACtC,cAAClB,GAAD,CAAahJ,KAAK,WAAWkK,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACInK,KAAK,QAAQoK,OAAQ,kBACjB,cAACC,GAAD,CAAkB1U,OAAQA,EAAOL,WAEzC,cAACsO,EAAA,EAAD,CAAQsE,UAAW0C,IAAYC,GAASd,EACpC5P,QAAS4P,EAAclG,UAAQ,EAAC7C,QAAQ,WAAWmJ,KAAK,SAAS7E,OAAK,aC3B/EzC,gBAAS,WACpB,MAAkCF,IAA1BtH,EAAR,EAAQA,UAAWoE,EAAnB,EAAmBA,WACnB,OACI,cAACyH,EAAA,EAAD,CAASnE,UAAQ,EAACsE,UAAU,SAAS7C,UAAQ,EAACwF,UAAU,WAAxD,SACI,eAAC/G,EAAA,EAAD,CAAWmB,MAAI,EAAf,UACI,eAACQ,EAAA,EAAD,CAAQzB,GAAG,KAAKJ,UAAQ,EAAxB,UACI,cAACgB,EAAA,EAAD,CAAOU,KAAK,UAAUjB,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAE4D,aAAc,MADnF,kBAICjM,EAAUyP,WACP,qCACI,cAAClG,EAAA,EAAD,CAAQzB,GAAG,KAAKJ,UAAQ,EAAC/B,QAAQ,4BACjC,cAAC4C,EAAA,EAAD,CAAQT,GAAIkB,IAAMf,GAAG,cAAcmB,KAAK,OAAO1B,UAAQ,EAAvD,kCAMJ,qCACI,cAACa,EAAA,EAAD,CAAQW,QAAS,kBAAM9E,EAAWsB,UAAU,cAAC,GAAD,MAAgB0D,KAAK,OAAO1B,UAAQ,EAAhF,oBAGA,cAACa,EAAA,EAAD,CAAQW,QAAS,kBAAM9E,EAAWsB,UAAU,cAAC,GAAD,MAAmB0D,KAAK,OAAO1B,UAAQ,EAAnF,uBAGA,cAACgI,GAAA,EAAD,CAASrE,YAAU,EAAC3D,UAAQ,EAA5B,gBACA,cAACa,EAAA,EAAD,CACIzJ,QAASkB,EAAUiE,UACnBmF,KAAK,OACL1B,UAAQ,EACR+B,MAAM,WACN9D,QAAQ,sBACRuD,QAASlJ,EAAUgF,2B,UChChC,SAAS2K,GAAT,GAA4E,IAAD,IAA/CjI,gBAA+C,aAA9B/B,eAA8B,MAAtB,aAAsB,EACtF,OACI,cAACiK,GAAA,EAAD,CAAQlG,QAAQ,EAAMhC,SAAUA,EAAhC,SACI,cAACgG,EAAA,EAAD,CAAQ/H,QAASA,M,cCAd,SAASkK,GAAWjC,GAC/B,MAAsBC,aAASD,EAAMjJ,MAArC,mBAAOmJ,EAAP,KAAcC,EAAd,KACA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAYhU,MAAO8T,EAAKG,WAAaH,EAAK9T,MAA1C,UACI,gCAAQ2T,EAAMO,QACd,oDAAcL,GAAWF,IACxBG,EAAKG,SAAWH,EAAK9T,MAClB,cAAC8R,GAAA,EAAD,CAAO5B,OAAK,EAACV,MAAM,MAAnB,SAA0BsE,EAAK9T,QAC/B,Q,cCRD,SAAS6V,GAAclC,GAClC,MAA+BC,aAASD,EAAMjJ,MAA9C,mBAAOmJ,EAAP,KAAcC,EAAd,KAAoBgC,EAApB,KACA,OACI,eAAC/B,GAAA,EAAKC,MAAN,CAAYhU,MAAO8T,EAAKG,WAAaH,EAAK9T,MAA1C,UACI,gCAAQ2T,EAAMO,QACf,cAAC6B,GAAA,EAAD,CACKC,WAAS,EACTC,QAAStC,EAAMsC,QACf9Q,MAAO0O,EAAM1O,OAAS,KACtBwK,SAAU,SAACQ,EAAG+F,GAAJ,OAAUJ,EAAQK,SAASD,EAAE/Q,QACvCiR,OAAQ,kBAAMN,EAAQO,YAAW,IACjCzB,YAAajB,EAAMiB,cAEtBd,EAAKG,SAAWH,EAAK9T,MAClB,cAAC8R,GAAA,EAAD,CAAO5B,OAAK,EAACV,MAAM,MAAnB,SAA0BsE,EAAK9T,QAC/B,QC1BT,IAAMsW,GAAkB,CAC3B,CAAExH,KAAM,SAAU3J,MAAO,UACzB,CAAE2J,KAAM,UAAW3J,MAAO,WAC1B,CAAE2J,KAAM,OAAQ3J,MAAO,QACvB,CAAE2J,KAAM,OAAQ3J,MAAO,QACvB,CAAE2J,KAAM,QAAS3J,MAAO,SACxB,CAAE2J,KAAM,SAAU3J,MAAO,W,qBCEd,SAASoR,GAAY5C,GAChC,MAA+BC,aAASD,EAAMjJ,MAA9C,mBAAOmJ,EAAP,KAAcC,EAAd,KAAoBgC,EAApB,KACA,OACI,eAAC/B,GAAA,EAAKC,MAAN,CAAYhU,MAAO8T,EAAKG,WAAaH,EAAK9T,MAA1C,UACI,cAAC,KAAD,uCACQ6T,GACAF,GAFR,IAGI6C,SAAW3C,EAAM1O,OAAS,IAAIqB,KAAKqN,EAAM1O,QAAW,KACpDwK,SAAU,SAAAxK,GAAK,OAAI2Q,EAAQK,SAAShR,OAEvC2O,EAAKG,SAAWH,EAAK9T,MAClB,cAAC8R,GAAA,EAAD,CAAO5B,OAAK,EAACV,MAAM,MAAnB,SAA0BsE,EAAK9T,QAC/B,QCFDuN,oBAAS,WACpB,IAAMhN,EAAUkW,eACR/M,EAAkB2D,IAAlB3D,cACAhD,EAC6BgD,EAD7BhD,eAAgBG,EACa6C,EADb7C,eACpBjB,EAAiC8D,EAAjC9D,aAAcd,EAAmB4E,EAAnB5E,eAEVhD,EAAO4U,eAAP5U,GAER,EAAgC+Q,mBAA6B,IAAIhP,GAAjE,mBAAO7B,EAAP,KAAiByD,EAAjB,KAEM0P,EAAmBC,KAAW,CAChCrR,MAAOqR,OAAaC,SAAS,kCAC7BpR,YAAamR,OAAaC,SAAS,wCACnCrR,SAAUoR,OAAaC,WACvBnR,KAAMkR,OAAaC,SAAS,oBAAoBsB,WAChDvS,MAAOgR,OAAaC,WACpBlR,KAAMiR,OAAaC,aAqBvB,OAjBArC,qBAAU,WACFlR,GAAI8D,EAAa9D,GAAIV,MAAK,SAAAY,GAAQ,OAAIyD,EAAY,IAAI5B,EAAmB7B,SAC9E,CAACF,EAAI8D,IAeJd,EAAuB,cAAC,GAAD,CAAkB4G,QAAQ,wBAIjD,eAACkG,EAAA,EAAD,CAASM,UAAQ,EAAjB,UACI,cAAC5C,EAAA,EAAD,CAAQ5D,QAAQ,mBAAmB4G,KAAG,EAAC9C,MAAM,SAC7C,cAAC,KAAD,CACI2F,iBAAkBA,EAClByB,oBAAkB,EAClBzC,cAAenS,EACfsS,SAAU,SAAArM,GAAM,OAvB5B,SAA0BjG,GACtB,GAAKA,EAASF,GAOV+E,EAAe7E,GAAUZ,MAAK,kBAAMb,EAAQC,KAAR,sBAA4BwB,EAASF,YAP3D,CACd,IAAI8E,EAAW,2BACR5E,GADQ,IAEXF,GAAI+U,iBAERnQ,EAAeE,GAAaxF,MAAK,kBAAMb,EAAQC,KAAR,sBAA4BoG,EAAY9E,SAiBvDgV,CAAiB7O,IAJzC,SAKK,gBAAGuM,EAAH,EAAGA,aAAcc,EAAjB,EAAiBA,QAASb,EAA1B,EAA0BA,aAAcc,EAAxC,EAAwCA,MAAxC,OACG,eAAC,KAAD,CAAMb,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACjB,GAAD,CAAahJ,KAAK,QAAQkK,YAAY,UACtC,cAACgB,GAAD,CAAYmB,KAAM,EAAGnC,YAAY,cAAclK,KAAK,gBACpD,cAACmL,GAAD,CAAeI,QAASK,GAAiB1B,YAAY,WAAWlK,KAAK,aACrE,cAAC6L,GAAD,CACIS,gBAAgB,OAChBtM,KAAK,OACLuM,gBAAc,EACdC,YAAY,OACZC,WAAW,yBAEf,cAAC7H,EAAA,EAAD,CAAQ5D,QAAQ,mBAAmB4G,KAAG,EAAC9C,MAAM,SAC7C,cAACkE,GAAD,CAAakB,YAAY,OAAOlK,KAAK,SACrC,cAACgJ,GAAD,CAAakB,YAAY,QAAQlK,KAAK,UACtC,cAAC4D,EAAA,EAAD,CACIsE,SAAU6B,IAAiBc,IAAUD,EACrCzQ,QAAS4P,EAActC,QAAQ,QAC/B5D,UAAQ,EAACsG,KAAK,SAASnJ,QAAQ,WACnC,cAAC4C,EAAA,EAAD,CAAQT,GAAIkB,IAAMf,GAAG,cAAcmE,QAAQ,QAAQ0C,KAAK,SAASnJ,QAAQ,uB,oBCxElF6B,gBAAS,YAAsD,IAAtBvB,EAAqB,EAArBA,WAC5CJ,EAAiByB,IAAjBzB,aAWR,OATAoH,qBAAU,WAIN,OAHIhH,GACAJ,EAAaG,oBAAoBC,GAE9B,WACHJ,EAAaoB,mBAElB,CAACpB,EAAcI,IAGd,qCACI,cAAC4F,EAAA,EAAD,CACIG,UAAU,SACVxC,SAAS,MACT9B,UAAQ,EACR+B,MAAM,OACNpB,MAAO,CAAEgJ,OAAQ,QALrB,SAOI,cAAC9H,EAAA,EAAD,sCAEJ,eAACsC,EAAA,EAAD,CAASrC,UAAQ,EAAC2C,UAAQ,EAA1B,UACI,cAAC,KAAD,CACIoC,SAAU,SAACrM,EAAD,OAAWoP,EAAX,EAAWA,UAAX,OACNzL,EAAaqB,WAAWhF,GAAQ7G,MAAK,kBAAMiW,QAC/ClD,cAAe,CAAE9S,KAAM,IACvB8T,iBAAkBC,KAAW,CACzB/T,KAAM+T,OAAaC,aAL3B,SAQK,gBAAGZ,EAAH,EAAGA,aAAca,EAAjB,EAAiBA,QAASd,EAA1B,EAA0BA,aAA1B,OACG,cAAC,KAAD,CAAME,UAAU,UAAhB,SACI,cAAC,KAAD,CAAOhK,KAAK,OAAZ,SACK,SAACiJ,GAAD,OACG,sBAAKvF,MAAO,CAAEI,SAAU,YAAxB,UACI,cAACiF,EAAA,EAAD,CAAQhE,OAAQgF,IAChB,kDACIG,YAAY,mEACZmC,KAAM,GACFpD,EAAME,OAHd,IAIIyD,WAAY,SAAAnH,GACM,UAAVA,EAAEzP,KAAmByP,EAAEoH,UAGb,UAAVpH,EAAEzP,KAAoByP,EAAEoH,WACxBpH,EAAEC,iBACFkF,GAAWd,oBAW/C,cAACgD,GAAA,EAAQ3F,MAAT,UACKjG,EAAaC,SAASwF,KAAI,SAAA1E,GAAO,OAC9B,eAAC6K,GAAA,EAAD,WACI,cAACA,GAAA,EAAQC,OAAT,CAAgBvJ,IAAKvB,EAAQpI,OAAS,qBACtC,eAACiT,GAAA,EAAQjH,QAAT,WACI,cAACiH,GAAA,EAAQE,OAAT,CAAgB7J,GAAIkB,IAAMf,GAAE,oBAAerB,EAAQhK,UAAnD,SACKgK,EAAQrI,cAEb,cAACkT,GAAA,EAAQG,SAAT,UACI,gCAAMC,aAAoBjL,EAAQC,WAAlC,YAEJ,cAAC4K,GAAA,EAAQK,KAAT,CAAczJ,MAAO,CAAE0J,WAAY,YAAnC,SAAkDnL,EAAQtL,YATpDsL,EAAQ7K,kBChE/ByL,gBAAS,YAAkD,IAAnBvL,EAAkB,EAAlBA,SACnD,OACI,eAAC4P,EAAA,EAAQC,MAAT,WACI,cAACD,EAAA,EAAD,CAASrC,SAAS,MAAlB,SACI,eAAC0D,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,SACI,cAAC2B,GAAA,EAAD,CAAM5B,KAAK,QAAQK,MAAM,OAAO9E,KAAK,WAEzC,cAACuI,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,4BAAIpN,EAASiC,qBAIzB,cAAC2N,EAAA,EAAD,CAASrC,UAAQ,EAAjB,SACI,eAAC0D,EAAA,EAAD,CAAM8E,cAAc,SAApB,UACI,cAAC9E,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,SACI,cAAC2B,GAAA,EAAD,CAAMrG,KAAK,WAAWyE,KAAK,QAAQK,MAAM,WAE7C,cAACyD,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACR,+BACG3G,kBAAOzG,EAASkC,KAAM,gCAKzB,cAAC0N,EAAA,EAAD,CAASrC,UAAQ,EAAjB,SACI,eAAC0D,EAAA,EAAD,CAAM8E,cAAc,SAApB,UACI,cAAC9E,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,SACI,cAAC2B,GAAA,EAAD,CAAMrG,KAAK,SAASyE,KAAK,QAAQK,MAAM,WAE3C,cAACyD,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,iCAAOpN,EAASoC,MAAhB,KAAyBpC,EAASmC,qBChC3CoJ,gBAAS,YAA4E,IAAD,IAAxCvL,SAAYiE,EAA4B,EAA5BA,UAAWI,EAAiB,EAAjBA,KAC9E,OAAKJ,EAED,qCACI,eAAC2L,EAAA,EAAD,CACIG,UAAU,SACV3D,MAAO,CAAEgJ,OAAQ,QACjB7H,SAAS,MACT0C,WAAS,EACTxE,UAAQ,EACR+B,MAAM,OANV,UAQKvJ,EAAUyK,OARf,IAQ6C,IAArBzK,EAAUyK,OAAe,SAAW,SAR5D,YAUA,cAACkB,EAAA,EAAD,CAASrC,UAAQ,EAAjB,SACI,cAAC4B,GAAA,EAAD,CAAM6G,SAAO,EAACC,SAAO,EAArB,SACKhS,EAAUoL,KAAI,SAAA1K,GAAQ,OACnB,eAACiH,GAAA,EAAD,CAAMQ,MAAO,CAAEI,SAAU,YAAzB,UACK7H,EAAShE,YAAT,OAAsB0D,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAM1D,WACzB,cAACmP,GAAA,EAAD,CACI1D,MAAO,CAAEI,SAAU,YACnBgB,MAAM,SACN0I,OAAO,QAHX,kBAOJ,cAACzJ,EAAA,EAAD,CAAOU,KAAK,OAAOjB,IAAKvH,EAASpC,OAAS,qBAC1C,eAACqJ,GAAA,EAAK2C,QAAN,CAAcwH,cAAc,SAA5B,UACI,cAACnK,GAAA,EAAK0B,OAAN,CAAazB,GAAG,KAAhB,SACI,cAAC,IAAD,CAAMG,GAAE,oBAAerH,EAAShE,UAAhC,SAA6CgE,EAASrC,gBAEzDqC,EAASW,WACV,cAACsG,GAAA,EAAKuK,MAAN,CAAY/J,MAAO,CAAEoB,MAAO,UAA5B,4BAfoC7I,EAAShE,oBAhBlD,QCFrByV,GAAqB,CACvBnR,OAAQ,mBAGNoR,GAAyB,CAC3B7J,SAAU,WACV8J,OAAQ,KACRC,KAAM,KACNnJ,MAAO,OACPoJ,OAAQ,OACRhJ,MAAO,SAOIjC,gBAAS,YAAsD,IAAD,IAAnBvL,EAAmB,EAAnBA,SACtD,EAA+EqL,IAAvE3D,cAAiB1C,EAAzB,EAAyBA,iBAAkBnC,EAA3C,EAA2CA,QAASqC,EAApD,EAAoDA,qBACpD,OACI,eAAC0K,EAAA,EAAQC,MAAT,WACI,eAACD,EAAA,EAAD,CAAS1B,OAAK,EAACX,SAAS,MAAMnB,MAAO,CAAEqK,QAAS,KAAhD,UACKzW,EAASmF,aACN,cAAC2K,GAAA,EAAD,CAAO1D,MAAO,CAAEI,SAAU,WAAYkK,OAAQ,IAAMH,MAAO,GAAII,IAAK,IAChET,QAAM,EAAC1I,MAAM,MAAM9D,QAAQ,cAEnC,cAAC+C,EAAA,EAAD,CAAOP,IAAG,iCAA4BlM,EAASgC,SAArC,QAAqDgM,OAAK,EAAC5B,MAAOgK,KAC5E,cAACxG,EAAA,EAAD,CAASxD,MAAOiK,GAAwBnI,OAAK,EAA7C,SACI,cAACtC,GAAA,EAAKiE,MAAN,UACI,cAACjE,GAAA,EAAD,UACI,eAACA,GAAA,EAAK2C,QAAN,WACI,cAACjB,EAAA,EAAD,CACIH,KAAK,OACLzD,QAAS1J,EAAS+B,MAClBqK,MAAO,CAAEoB,MAAO,WAEpB,4BAAI/G,kBAAOzG,EAASkC,KAAO,iBAC3B,2CACc,iCAAQ,cAAC,IAAD,CAAM8J,GAAE,8BAAehM,EAASqE,YAAxB,aAAe,EAAe1D,UAAtC,mBAAmDX,EAASqE,YAA5D,aAAmD,EAAe/B,+BAO5G,cAACsN,EAAA,EAAD,CAASM,UAAQ,EAAC3C,SAAS,SAA3B,SACKvN,EAASmE,OACN,qCACI,cAACmI,EAAA,EAAD,CACIkB,MAAOxN,EAASmF,YAAc,QAAU,MACxCgL,QAAQ,OACRjC,OAAK,EACLxE,QAAS1J,EAASmF,YAAc,uBAAyB,kBACzD8H,QAAS/H,EACTrC,QAASA,IAEb,cAACyJ,EAAA,EAAD,CAAQT,GAAIkB,IACR6D,SAAU5Q,EAASmF,YACnB6G,GAAE,kBAAahM,EAASF,IACxB0N,MAAM,SACN2C,QAAQ,QAJZ,6BAQJnQ,EAASgE,QACT,cAACsI,EAAA,EAAD,CAAQzJ,QAASA,EAASoK,QAASjI,EAAnC,+BAEA,cAACsH,EAAA,EAAD,CAAQsE,SAAU5Q,EAASmF,YACvBtC,QAASA,EAASoK,QAASjI,EAAkBwI,MAAM,OADvD,mCC/DLjC,gBAAS,WACpB,IAAQ7D,EAAkB2D,IAAlB3D,cACkB1H,EAAkE0H,EAApF/E,iBAA4BiB,EAAwD8D,EAAxD9D,aAAcd,EAA0C4E,EAA1C5E,eAAgBsC,EAA0BsC,EAA1BtC,sBAC1DtF,EAAO4U,eAAP5U,GAQR,OANAkR,qBAAU,WAEN,OADIlR,GAAI8D,EAAa9D,GACd,kBAAMsF,OACd,CAACtF,EAAI8D,EAAcwB,IAGlBtC,IAAmB9C,EAAiB,cAAC0T,GAAD,IAIpC,cADA,CACCzC,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,UACI,cAAC,GAAD,CAAwBpN,SAAYA,IACpC,cAAC,GAAD,CAAsBA,SAAYA,IAClC,cAAC,GAAD,CAAsBgK,WAAYhK,EAASF,QAE/C,cAACmR,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,SACI,cAAC,GAAD,CAAyBpN,SAAUA,YC5BpC,SAAS4W,KACpB,IACA,EAA4B/F,mBAAS,MAArC,mBAAOxS,EAAP,KAAekU,EAAf,KA0BA,OACI,qCACI,cAACjF,EAAA,EAAD,CAAQzB,GAAG,KAAKnC,QAAQ,yBACxB,cAACkG,EAAA,EAAD,UACI,eAACtD,EAAA,EAAOuD,MAAR,CAAcgH,OAAO,IAArB,UACI,cAACvK,EAAA,EAAD,CAAQW,QA7BxB,WACIlQ,IAAMoC,IAAI2X,uBAA6B7N,OAAM,SAAAgK,GAAG,OAAIhV,QAAQC,IAAI+U,EAAIrV,cA4BvB8L,QAAQ,YAAYwE,OAAK,EAAC6I,SAAO,IAClE,cAACzK,EAAA,EAAD,CAAQW,QA1BxB,WACIlQ,IAAMoC,IAAI2X,yBAA+B7N,OAAM,SAAAgK,GAAG,OAAIhV,QAAQC,IAAI+U,EAAIrV,cAyBvB8L,QAAQ,cAAcwE,OAAK,EAAC6I,SAAO,IACtE,cAACzK,EAAA,EAAD,CAAQW,QAXxB,WACIlQ,IAAMuC,KAAKwX,iBAAwB,IAAI7N,OAAM,SAAAgK,GAAG,OAAIV,EAAUU,OAUVvJ,QAAQ,mBAAmBwE,OAAK,EAAC6I,SAAO,IAChF,cAACzK,EAAA,EAAD,CAAQW,QAxBxB,WACIlQ,IAAMoC,IAAI2X,0BAAgC7N,OAAM,SAAAgK,GAAG,OAAIhV,QAAQC,IAAI+U,EAAIrV,cAuBvB8L,QAAQ,eAAewE,OAAK,EAAC6I,SAAO,IACxE,cAACzK,EAAA,EAAD,CAAQW,QArBxB,WACIlQ,IAAMoC,IAAI2X,0BAAgC7N,OAAM,SAAAgK,GAAG,OAAIhV,QAAQC,IAAI+U,EAAIrV,cAoBtB8L,QAAQ,eAAewE,OAAK,EAAC6I,SAAO,IACzE,cAACzK,EAAA,EAAD,CAAQW,QAlBxB,WACIlQ,IAAMoC,IAAI2X,2BAAiC7N,OAAM,SAAAgK,GAAG,OAAIhV,QAAQC,IAAI+U,OAiBxBvJ,QAAQ,WAAWwE,OAAK,EAAC6I,SAAO,SAGvE1Y,GACG,cAAC0U,GAAD,CAAkB1U,OAAQA,OC7C3B,SAAS2Y,KACpB,OACI,eAACpH,EAAA,EAAD,CAASgD,aAAW,EAApB,UACI,eAACtF,EAAA,EAAD,CAAQN,MAAI,EAAZ,UACI,cAAC+B,GAAA,EAAD,CAAMrG,KAAK,WADf,6DAIA,cAACkH,EAAA,EAAQqH,OAAT,UACI,cAAC3K,EAAA,EAAD,CAAQT,GAAIkB,IAAMf,GAAG,gBAAgB+K,SAAO,EAA5C,4CCNDxL,oBAAS,WAAwB,IAAD,IACnC9N,EAAgB4N,IAAhB5N,YACR,OACI,eAACkO,EAAA,EAAD,WACI,cAAC2B,EAAA,EAAD,CAAQzB,GAAG,KAAKnC,QAAQ,iBACxB,cAAC4D,EAAA,EAAD,CAAQgD,KAAG,EAACzE,GAAG,KAAK2B,MAAM,MAAM9D,QAAO,UAAEjM,EAAYO,aAAd,aAAE,EAAmBkZ,WAC3D,UAAAzZ,EAAYO,aAAZ,eAAmB6B,UAChB,eAAC+P,EAAA,EAAD,WACI,cAACtC,EAAA,EAAD,CAAQzB,GAAG,KAAKnC,QAAQ,cAAc8D,MAAM,SAC5C,sBAAMpB,MAAO,CAAEiB,UAAW,QAA1B,SAAqC5P,EAAYO,MAAM6B,mB,UCV5D0L,gBAAS,WACpB,IAAQpD,EAAekD,IAAflD,WAER,OACI,cAACgP,GAAA,EAAD,CAAO3N,KAAMrB,EAAWoB,MAAMC,KAAM4N,QAASjP,EAAWC,WAAY+E,KAAK,OAAzE,SACI,cAACgK,GAAA,EAAM5I,QAAP,UACKpG,EAAWoB,MAAMlK,Y,UCEnBkM,gBAAS,YAAkD,IAAvB8L,EAAsB,EAAtBA,YAC/C,EAAqDhM,IAA7C1B,aAAgBvI,EAAxB,EAAwBA,QAASD,EAAjC,EAAiCA,cACjC,OACI,cAAC,KAAD,CAEIgR,cAAe,CAAE7P,YAAW,OAAElB,QAAF,IAAEA,OAAF,EAAEA,EAASkB,YAAauM,IAAG,OAAEzN,QAAF,IAAEA,OAAF,EAAEA,EAASyN,KAClEyD,SAAU,SAAArM,GACN9E,EAAc8E,GAAQ7G,MAAK,WACvBiY,GAAY,OAGpBlE,iBAAkBC,KAAW,CACzB9Q,YAAa8Q,OAAaC,aATlC,SAaK,gBAAGZ,EAAH,EAAGA,aAAca,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,MAA1B,OACG,eAAC,KAAD,CAAMb,UAAU,UAAhB,UACI,cAAChB,GAAD,CAAakB,YAAY,eAAelK,KAAK,gBAC7C,cAACkL,GAAD,CAAYmB,KAAM,EAAGnC,YAAY,eAAelK,KAAK,QACrD,cAAC4D,EAAA,EAAD,CACIC,UAAQ,EACRsG,KAAK,SACLhQ,QAAS4P,EACT/I,QAAQ,iBACRyG,QAAQ,QACRmH,SAAUhE,IAAYC,aChC/BhI,gBAAS,WACpB,IAAQ5B,EAAiB0B,IAAjB1B,aACA4N,EAA2B5N,EAA3B4N,cAAenW,EAAYuI,EAAZvI,QACvB,EAAgCyP,oBAAS,GAAzC,mBAAOjO,EAAP,KAAiByU,EAAjB,KAEA,OACI,cAACG,GAAA,EAAIC,KAAL,UACI,eAACxG,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAM,KAAnB,UACI,cAACE,EAAA,EAAD,CAAQ6C,QAAQ,OAAOnD,KAAK,OAAOtD,QAAO,uBAAWtI,QAAX,IAAWA,OAAX,EAAWA,EAASkB,eAC7DiV,GACG,cAACjL,EAAA,EAAD,CACI6D,QAAQ,QACRjC,OAAK,EACLxE,QAAS9G,EAAW,SAAW,eAC/BqK,QAAS,kBAAMoK,GAAazU,SAIxC,cAACqO,EAAA,EAAKC,OAAN,CAAa9D,MAAM,KAAnB,SACKxK,EAAW,cAAC,GAAD,CAAiByU,YAAaA,IAAkB,sBAAMjL,MAAO,CAAE0J,WAAY,YAA3B,gBAA0C1U,QAA1C,IAA0CA,OAA1C,EAA0CA,EAASyN,gBCjB7H6I,GAAQ,CACV,CAAEC,SAAU,gBAAiBC,KAAM,CAAElZ,IAAK,WAC1C,CAAEiZ,SAAU,cAAeC,KAAM,CAAElZ,IAAK,SACxC,CAAEiZ,SAAU,UAAWC,KAAM,CAAElZ,IAAK,aAGzB6M,gBAAS,WAEpB,IAAQ5B,EAAiB0B,IAAjB1B,aAEJ9B,EAIA8B,EAJA9B,mBACAzG,EAGAuI,EAHAvI,QACA6F,EAEA0C,EAFA1C,kBACAD,EACA2C,EADA3C,eAGJgK,qBAAU,WACNnJ,EAAmBzG,EAAST,YAC7B,CAACkH,EAAoBzG,IAOxB,OACI,cAACoW,GAAA,EAAIC,KAAL,CAAU5U,QAASoE,EAAnB,SACI,eAACgK,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,cAACE,EAAA,EAAD,CAAQ6C,QAAQ,OAAOnD,KAAK,WACxBtD,QAAS,iBAEjB,eAACuH,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,UACI,cAACoK,GAAA,EAAD,CACIE,MAAOA,GACPG,KAAM,CAAE5H,WAAW,EAAMpD,UAAU,GACnCiL,YAAa,SAAC3J,EAAG1R,GAAJ,OAhBT,SAAC0R,EAAmB1R,GACxCoL,EAAmBzG,EAAST,SAAU+W,GAAMjb,EAAKsb,aACrCH,KAAKlZ,KAcyBsZ,CAAgB7J,EAAG1R,MAEjD,uBACA,cAAC6R,GAAA,EAAKuB,MAAN,CAAYoI,YAAa,EAAzB,SACKjR,EAAeqI,KAAI,SAACrP,GAAD,OAChB,eAACsO,GAAA,EAAD,CACIzC,GAAIkB,IACJf,GAAE,sBAAiBhM,EAASF,IAFhC,UAKI,cAAC2M,EAAA,EAAD,CACGP,IAAG,iCAA4BlM,EAASgC,SAArC,QACHoK,MAAO,CAAEqE,UAAW,IAAKyH,UAAW,WAEvC,eAAC5J,GAAA,EAAKC,QAAN,WACI,cAACD,GAAA,EAAKhB,OAAN,CACIyC,UAAU,SADd,SACwB/P,EAAS+B,QACjC,eAACuM,GAAA,EAAK6J,KAAN,CAAWpI,UAAU,SAArB,UACI,8BAAMtJ,kBAAO,IAAIjC,KAAKxE,EAASkC,MAC3B,YACJ,8BAAMuE,kBAAO,IAAIjC,KAAKxE,EAASkC,MAC3B,oBAbPlC,EAASF,oB,UC7C/ByL,gBAAS,WAEpB,IAAQ5B,EAAiB0B,IAAjB1B,aACAvI,EAAsDuI,EAAtDvI,QAASyF,EAA6C8C,EAA7C9C,WAAYC,EAAiC6C,EAAjC7C,kBAAmBC,EAAc4C,EAAd5C,UAEhD,OACI,cAACyQ,GAAA,EAAIC,KAAL,CAAU5U,QAASiE,EAAnB,SACI,eAACmK,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,cAACE,EAAA,EAAD,CACI6C,QAAQ,OACRnD,KAAK,OACLtD,QAAsB,IAAb3C,EAAA,kCAAqC3F,QAArC,IAAqCA,OAArC,EAAqCA,EAASkB,aAA9C,wBAAuElB,QAAvE,IAAuEA,OAAvE,EAAuEA,EAASkB,YAAhF,qBAEjB,cAAC8V,GAAA,EAAD,CAAYhL,MAAO,GAAnB,SACI,cAACkB,GAAA,EAAKuB,MAAN,CAAYoI,YAAa,EAAzB,SACKpR,EAAWwI,KAAI,SAAAjO,GAAO,OACnB,cAAC,GAAD,CAAoCA,QAASA,GAA3BA,EAAQT,yB,iBChBvC,SAAS0X,GAAT,GAAkE,IAApCC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,WACvD,OACI,cAAC,KAAD,CACIrM,IAAKoM,EACLlM,MAAO,CAAEoK,OAAQ,IAAKpJ,MAAO,QAC7BoL,mBAAoB,EACpBC,YAAa,EACbC,QAAQ,eACRC,QAAQ,EACRC,SAAU,EACVC,aAAc,EACdC,YAAY,EACZC,cAAe,SAAAC,GAAO,OAAIT,EAAWS,M,cCblC,SAASC,GAAT,GAAmD,IAApBC,EAAmB,EAAnBA,SACpCC,EAAW,CACb/D,OAAQ,kBACRnG,YAAa,OACbmK,aAAc,MACdC,WAAY,OACZtJ,UAAW,SACXyG,OAAQ,KAON8C,EAASC,uBAAY,SAAAC,GACvBN,EAASM,EAAcnK,KAAI,SAACxO,GAAD,OAAec,OAAOC,OAAOf,EAAM,CAC1D6X,QAASe,IAAIC,gBAAgB7Y,WAElC,CAACqY,IACJ,EAAsDS,aAAY,CAAEL,WAA5DM,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,cAAeC,EAArC,EAAqCA,aAErC,OACI,gDAASF,KAAT,IAAyBxN,MAAO0N,EAAY,2BAAQX,GAZvC,CACblK,YAAa,UAWiEkK,EAA9E,UACI,qCAAWU,MACX,cAAC9K,GAAA,EAAD,CAAMrG,KAAK,SAASyE,KAAK,SACzB,cAACG,EAAA,EAAD,CAAQ5D,QAAQ,wBCtBb,SAASqQ,GAAT,GAA2D,IAA/BlX,EAA8B,EAA9BA,QAASjC,EAAqB,EAArBA,YAChD,EAA0BiQ,mBAAc,IAAxC,mBAAOmJ,EAAP,KAAcd,EAAd,KACA,EAA8BrI,qBAA9B,mBAAOmI,EAAP,KAAgBT,EAAhB,KAcA,OANAvH,qBAAU,WACN,OAAO,WACHgJ,EAAM3W,SAAQ,SAACxC,GAAD,OAAe4Y,IAAIQ,gBAAgBpZ,EAAK6X,eAE3D,CAACsB,IAGA,eAAC/I,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,UACI,cAACE,EAAA,EAAD,CAAQgD,KAAG,EAAC9C,MAAM,OAAO9D,QAAQ,wBACjC,cAACuP,GAAD,CAAqBC,SAAUA,OAEnC,cAACjI,EAAA,EAAKC,OAAN,CAAa9D,MAAO,IACpB,eAAC6D,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,UACI,cAACE,EAAA,EAAD,CAAQgD,KAAG,EAAC9C,MAAM,OAAO9D,QAAQ,0BAChCsQ,GAASA,EAAMtL,OAAS,GACrB,cAAC2J,GAAD,CAAoBE,WAAYA,EAAYD,aAAc0B,EAAM,GAAGtB,aAG3E,cAACzH,EAAA,EAAKC,OAAN,CAAa9D,MAAO,IACpB,eAAC6D,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,UACI,cAACE,EAAA,EAAD,CAAQgD,KAAG,EAAC9C,MAAM,OAAO9D,QAAQ,8BAChCsQ,GAASA,EAAMtL,OAAS,GACrB,qCACI,qBAAKgE,UAAU,cAActG,MAAO,CAAEqE,UAAW,IAAKyJ,SAAU,YAChE,eAAC5N,EAAA,EAAOuD,MAAR,CAAcgH,OAAQ,EAAtB,UACI,cAACvK,EAAA,EAAD,CAAQzJ,QAASA,EAASoK,QAhClD,WACQ+L,GACAA,EAAQmB,mBAAmBC,QAAO,SAAAC,GAAI,OAAIzZ,EAAYyZ,OA8BK9N,UAAQ,EAACS,KAAK,UACzD,cAACV,EAAA,EAAD,CAAQsE,SAAU/N,EAASoK,QAAS,kBAAMiM,EAAS,KAAKlM,KAAK,sBCrC1EzB,oBAAS,YAA4C,IAAD,EAAlBnK,EAAkB,EAAlBA,QAC7C,EACwDiK,IADhD1B,aAAgB4N,EAAxB,EAAwBA,cAAe3W,EAAvC,EAAuCA,YACnCgG,EADJ,EACIA,UAAW/D,EADf,EACeA,QAAS5B,EADxB,EACwBA,aAAcC,EADtC,EACsCA,YACtC,EAAwC2P,oBAAS,GAAjD,mBAAOyJ,EAAP,KAAqBC,EAArB,KACA,EAA4B1J,mBAAS,IAArC,mBAAO2J,EAAP,KAAeC,EAAf,KAgBA,OACI,cAACjD,GAAA,EAAIC,KAAL,UACI,eAACxG,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,UACI,cAACE,EAAA,EAAD,CAAQ6C,QAAQ,OAAOnD,KAAK,QAAQtD,QAAQ,WAC3C6N,GACG,cAACjL,EAAA,EAAD,CAAQ6D,QAAQ,QAAQjC,OAAK,EACzBxE,QAAS4Q,EAAe,SAAW,YACnCrN,QAAS,kBAAMsN,GAAiBD,SAI5C,cAACrJ,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACKkN,EACG,cAACP,GAAD,CAAmBnZ,YA5BvC,SAA2BC,GACvBD,EAAYC,GAAMzB,MAAK,kBAAMmb,GAAgB,OA2BsB1X,QAAS+D,IAE5D,cAAC0H,GAAA,EAAKuB,MAAN,CAAYoI,YAAa,EAAzB,mBACK7W,EAAQiG,cADb,aACK,EAAgBgI,KAAI,SAAAjI,GAAK,OACtB,eAACkH,GAAA,EAAD,WACI,cAAC7B,EAAA,EAAD,CAAOP,IAAK9E,EAAMlI,MACjBqY,GACG,eAACjL,EAAA,EAAOuD,MAAR,CAAc7B,OAAK,EAAC6I,OAAQ,EAA5B,UACI,cAACvK,EAAA,EAAD,CACI4B,OAAK,EACLV,MAAM,QACN9D,QAAQ,OACRhB,KAAM,OAAQtB,EAAMtH,GACpB8Q,SAAUxJ,EAAME,OAChBzE,QAAS2X,IAAW,OAASpT,EAAMtH,IAAM+C,EACzCoK,QAAS,SAAAkB,GAAC,OAvCtD,SAA4B/G,EAAc+G,GACtCsM,EAAUtM,EAAEuM,cAAchS,MAC1BzH,EAAamG,GAqCyCuT,CAAmBvT,EAAO+G,MAE5C,cAAC7B,EAAA,EAAD,CACI4B,OAAK,EACLV,MAAM,MACNR,KAAK,QACLnK,QAAS2X,IAAWpT,EAAMtH,IAAM+C,EAChCoK,QAAS,SAAAkB,GAAC,OAzCtD,SAA2B/G,EAAc+G,GACrCsM,EAAUtM,EAAEuM,cAAchS,MAC1BxH,EAAYkG,GAuC0CwT,CAAkBxT,EAAO+G,IACvCyC,SAAUxJ,EAAME,OAChBoB,KAAMtB,EAAMtH,UApBjBsH,EAAMtH,mBCnClCyL,gBAAS,YAA6C,IAAnBnK,EAAkB,EAAlBA,QACtCuI,EAAiB0B,IAAjB1B,aAEF+N,EAAQ,CACV,CAAEC,SAAU,QAAS7E,OAAQ,kBAAM,cAAC,GAAD,MACnC,CAAE6E,SAAU,SAAU7E,OAAQ,kBAAM,cAAC,GAAD,CAAe1R,QAASA,MAC5D,CAAEuW,SAAU,SAAU7E,OAAQ,kBAAM,cAAC,GAAD,MACpC,CAAE6E,SAAU,YAAa7E,OAAQ,kBAAM,cAAC,GAAD,MACvC,CAAE6E,SAAU,YAAa7E,OAAQ,kBAAM,cAAC,GAAD,OAG3C,OACI,cAAC0E,GAAA,EAAD,CACIK,KAAM,CAAE7J,OAAO,EAAMd,UAAU,GAC/B2N,aAAa,QACbnD,MAAOA,EACPI,YAAa,SAAC3J,EAAG1R,GAAJ,OAAakN,EAAazC,aAAazK,EAAKsb,mB,UCpBtDxM,gBAAS,YAA4C,IAAnBnK,EAAkB,EAAlBA,QAC7C,OACI,cAACwO,EAAA,EAAD,UACI,eAACqB,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,cAACxB,GAAA,EAAKiE,MAAN,UACI,eAACjE,GAAA,EAAD,WACI,cAACA,GAAA,EAAKa,MAAN,CAAYC,QAAM,EAACS,KAAK,QAAQjB,IAAK9K,EAAQmB,OAAS,qBACtD,cAACqJ,GAAA,EAAK2C,QAAN,CAAcwH,cAAc,SAA5B,SACI,cAACzI,EAAA,EAAD,CAAQzB,GAAG,KAAKnC,QAAStI,EAAQkB,uBAKjD,eAAC2O,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,UACI,eAAC0N,GAAA,EAAUjL,MAAX,CAAiBgH,OAAQ,EAAzB,UACI,cAACiE,GAAA,EAAD,CAAW5I,MAAM,YAAY/O,MAAO/B,EAAQmE,iBAC5C,cAACuV,GAAA,EAAD,CAAW5I,MAAM,YAAY/O,MAAO/B,EAAQuG,oBAEhD,cAAC8L,GAAA,EAAD,IACA,cAAC,GAAD,CAAcrS,QAASA,eCrB5BmK,gBAAS,WACpB,IAAQ5K,EAAa+T,eAAb/T,SACAgJ,EAAiB0B,IAAjB1B,aACAhD,EAAuDgD,EAAvDhD,eAAgBQ,EAAuCwC,EAAvCxC,YAAa/F,EAA0BuI,EAA1BvI,QAAS8F,EAAiByC,EAAjBzC,aAS9C,OAPA8J,qBAAU,WAEN,OADA7J,EAAYxG,GACL,WACHuG,EAAa,MAElB,CAACC,EAAaxG,EAAUuG,IAEvBP,EAAuB,cAAC+M,GAAD,CAAmBhK,QAAQ,uBAGlD,cAACuH,EAAA,EAAD,UACI,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACKhM,GACG,qCACI,cAAC,GAAD,CAAeA,QAASA,IACxB,cAAC,GAAD,CAAgBA,QAASA,c,2BCtBlC,SAAS2Z,GAAT,GAAiE,IAA9BC,EAA6B,EAAxCC,UAAyBC,EAAe,mBACtD1H,EAAiBnI,IAA9BtH,UAAayP,WACrB,OACI,cAAC,KAAD,2BACQ0H,GADR,IAEIpI,OAAQ,SAACnB,GAAD,OAAW6B,EAAa,cAACwH,EAAD,eAAerJ,IAAY,cAAC,KAAD,CAAU3F,GAAG,UCiDrET,oBA1Cf,WACE,IAAM4P,EAAWC,eACjB,EAAmC/P,IAA3B5N,EAAR,EAAQA,YAAasG,EAArB,EAAqBA,UAUrB,OARAiN,qBAAU,WACJvT,EAAYF,MACdwG,EAAU0E,UAAU4S,SAAQ,kBAAM5d,EAAY4L,kBAE9CtF,EAAU4E,yBAAyBvJ,MAAK,kBAAM3B,EAAY4L,oBAE3D,CAAC5L,EAAasG,IAEZtG,EAAY2L,UAGf,qCACE,cAAC,IAAD,CAAgBoD,SAAS,eAAe8O,iBAAe,IACvD,cAAC,GAAD,IACA,cAAC,KAAD,CAAOvP,OAAK,EAACwP,KAAK,IAAIN,UAAWO,KACjC,cAAC,KAAD,CACED,KAAM,QACNzI,OAAQ,kBACN,qCACE,cAAC2I,EAAD,IACA,cAAC9P,EAAA,EAAD,CAAWS,MAAO,CAAEiB,UAAW,OAA/B,SACE,eAAC,KAAD,WACE,cAAC0N,GAAD,CAAchP,OAAK,EAACwP,KAAK,cAAcN,UAAWS,KAClD,cAACX,GAAD,CAAcQ,KAAK,kBAAkBN,UAAWU,KAChD,cAACZ,GAAD,CAAiCQ,KAAM,CAAC,kBAAmB,eAAgBN,UAAWW,IAAnET,EAASzc,KAC5B,cAACqc,GAAD,CAAcQ,KAAK,sBAAsBN,UAAWY,KACpD,cAACd,GAAD,CAAcQ,KAAK,UAAUN,UAAWrE,KACxC,cAAC,KAAD,CAAO2E,KAAK,gBAAgBN,UAAWa,KACvC,cAAC,KAAD,CAAOb,UAAWjE,mBApBG,cAAC,GAAD,CAAkBtN,QAAQ,sBCjBhDqS,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB7c,MAAK,YAAkD,IAA/C8c,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCNC,SAASO,KACtB,IAAQC,EAAapB,eAAboB,SAMR,OAJAxL,qBAAU,WACR1I,OAAOmU,SAAS,EAAG,KAClB,CAACD,IAEG,KCIF,IAAMje,GAAUme,eAEvBC,IAAS7J,OACP,cAAC3H,EAAayR,SAAd,CAAuBzZ,MAAO3F,EAA9B,SACE,eAAC,KAAD,CAAQe,QAASA,GAAjB,UACE,cAACge,GAAD,IACA,cAAC,GAAD,SAGJM,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.1ed260c9.chunk.js","sourcesContent":["export interface Pagination {\r\n    //add the properties that we get back\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber =1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    console.log(error);\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {})\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n}\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}\r\n\r\n","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n   username: string;\r\n   displayName: string;\r\n   image?: string;\r\n   bio?: string; \r\n   followersCount: number;\r\n   followingCount: number;\r\n   following: boolean;\r\n   photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n   constructor(user: User) {\r\n      this.username = user.username;\r\n      this.displayName = user.displayName;\r\n      this.image = user.image;\r\n   }\r\n}\r\n\r\nexport interface Photo {\r\n   id: string;\r\n   url: string;\r\n   isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n   id: string;\r\n   title: string;\r\n   category: string;\r\n   date: Date;\r\n}\r\n","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\"\r\n\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                \r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            //check if keyu is equal to start date\r\n            if (key === 'startDate') {\r\n                /*convert this date to an ISOS  string so that there is genuinely a \r\n                string that we send up.*/\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error)\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity }\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees =\r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}\r\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n    \r\n   \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n\r\n            }\r\n        )\r\n    }\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !==\r\n                    store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            //update attendees\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.loadingActivities = false)\r\n        }\r\n\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        //we just cast our user into a boolean so we use the double exclamention marks !!\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        //Redirect them back to the home page\r\n        history.push('/');\r\n\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n    \r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                //this.startRefreshTokenTimer(user);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'})\r\n        }\r\n    }\r\n\r\n   /* refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            runInAction(() => this.user = user);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }*/\r\n   \r\n\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;   \r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext)\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null =  window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {        \r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function MavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} exact to='/' header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    Rectivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`}\r\n                                text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activites' \r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\" \r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\" \r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}    \r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date: Date) => setPredicate('startDate', date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Reveal, RevealContent, Button } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\n//Pass a profile\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loading } = profileStore;\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <RevealContent visible style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    color='teal'\r\n                    content={profile.following ? 'Following' : 'Not following'} />\r\n            </RevealContent>\r\n            <RevealContent hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </RevealContent>\r\n        </Reveal>\r\n    )\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`} >\r\n                            <Image \r\n                                size='mini' \r\n                                circular src={attendee.image || '/assets/user.png'} \r\n                                bordered\r\n                                style={attendee.following ? styles : null}    \r\n                            />                                \r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from \"date-fns\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />                \r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                             {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' />{activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { observer } from 'mobx-react-lite';\r\nimport ActivityListItem from \"./ActivityListItem\";\r\nimport { Fragment } from \"react\";\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceHolder';\r\n\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination &&\r\n                            pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    type?: string;\r\n    name: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\r\n                setErrors({ error: 'Invalid email or password' }))}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() => <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n\r\n    )\r\n\r\n})","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({ errors }: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: '', username: '', email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\r\n                setErrors({ error }))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting}\r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n\r\n    )\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button, Divider } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead' >\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register!\r\n                        </Button>\r\n                        <Divider horizontal inverted>Or</Divider>\r\n                        <Button \r\n                            loading={userStore.fbLoading}\r\n                            size='huge' \r\n                            inverted\r\n                            color='facebook'\r\n                            content='Login with Facebook'\r\n                            onClick={userStore.facebookLogin}                        \r\n                        />\r\n                    </>\r\n\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})\r\n","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?:string\r\n}\r\n\r\nexport default function LoadingComponents({inverted= true , content='Loading...'}: Props) {\r\n    return(\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n           <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null} \r\n                onChange={(e, d) => helpers.setValue(d.value)}   \r\n                onBlur={() => helpers.setTouched(true)}   \r\n                placeholder={props.placeholder}    \r\n           />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    { text: 'Drinks', value: 'drinks' },\r\n    { text: 'Culture', value: 'culture' },\r\n    { text: 'Film', value: 'film' },\r\n    { text: 'Food', value: 'food' },\r\n    { text: 'Music', value: 'music' },\r\n    { text: 'Travel', value: 'travel' },\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\n\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Form, Formik } from \"formik\";\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport * as Yup from 'yup';\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity,\r\n        loadActivity, loadingInitial } = activityStore;\r\n\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n    }, [id, loadActivity])\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            }\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n\r\n    if (loadingInitial) return <LoadingComponent content='loading Activity...' />\r\n\r\n    return (\r\n\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right'\r\n                            positive type='Submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!,'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host    \r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following && \r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n})\r\n\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        loading={loading} onClick={updateAttendance} color='teal'>\r\n                        Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponents from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSideBar from \"./ActivityDetailedSidebar\";\r\nimport ActivityDetailedHeader from \"./ActivityDetaledHeader\";\r\n\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponents />;\r\n\r\n    return (\r\n        //Here always returns JSX\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity = {activity} />\r\n                <ActivityDetailedInfo activity = {activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSideBar activity={activity}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n\r\n    )\r\n})\r\n","import React from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors}/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return(\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='../activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function ServerError() {\r\n    const { commonStore } = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{ marginTop: '10px' }}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport { Button } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n    return (\r\n        <Formik\r\n\r\n            initialValues={{ displayName: profile?.displayName, bio: profile?.bio }}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n\r\n        >\r\n            {({ isSubmitting, isValid, dirty }) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayname' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disable={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n\r\n        </Formik>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> : <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n\r\n    )\r\n\r\n})","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport React, { SyntheticEvent, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Grid, Header,Image, Tab, TabProps } from \"semantic-ui-react\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities,\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as\r\n            number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                   src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                   style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Card, Grid, GridColumn, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\n\r\n\r\nexport default observer(function ProfileFollowings() {\r\n\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings} >\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='user'\r\n                        content={activeTab ===3 ? `People following ${profile?.displayName}`: `People ${profile?.displayName} is following` } />\r\n                </Grid.Column>\r\n                <GridColumn width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </GridColumn>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles} >\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo ' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Button, Card, Grid, Header, Image, Tab } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto,\r\n        uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main'+ photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'Main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button \r\n                                                basic \r\n                                                color='red' \r\n                                                icon='trash'\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}                                                \r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({ profile }: Props) {\r\n    const { profileStore } = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <ProfileAbout /> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings /> },\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponents from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponents content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n\r\n}","import { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport HomePage from '../../features/Home/HomePage';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestErrors';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport { useEffect } from 'react';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const { commonStore, userStore } = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <Route exact path='/' component={HomePage} />\r\n      <Route\r\n        path={'/(.+)'}\r\n        render={() => (\r\n          <>\r\n            <NavBar />\r\n            <Container style={{ marginTop: '7em' }}>\r\n              <Switch>\r\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                <PrivateRoute path='/errors' component={TestErrors} />\r\n                <Route path='/server-error' component={ServerError} />\r\n                <Route component={NotFound} />\r\n              </Switch>\r\n            </Container>\r\n          </>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    <Router history={history}>\r\n      <ScrollToTop />\r\n      <App />\r\n    </Router>\r\n  </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}